#!/bin/bash
# set -e
set -o pipefail

_filename=$0

SKIP_MYSQL=false
SKIP_REDIS=false
CHANGE_THIS_VERSION=""
DOCKER_COMPOSE_FILE=""
UPGRADE_DIR=~/dongtai_iast_upgrade
DESTORY_DATA=false
all_sql_exists=true

Info(){
  echo -e "[Info] $1"
}

Error(){
  echo -e "\033[31m[Error] $1 \033[0m"
}

Todo(){
  echo -e "\033[36m[Todo] $1 \033[0m"
}

Notice(){
  echo -e "\033[33m[Important] $1 \033[0m"
}

Usage(){
  echo -e "\033[33m[Usage] $1 \033[0m"
}


# Display usage message function
usage(){
    Usage "\t$_filename -h                                  Display usage message"
    Usage "\t$_filename install -s mysql,redis  -v 1.0.5    Install iast server"
    Usage "\t$_filename remove|rm [-d]                      Uninstall iast server"
    Usage "\t$_filename upgrade -f 1.0.5 -t 1.1.2           Upgrade iast server"
}

OUT="$(uname -s)"
case "${OUT}" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${OUT}"
esac
CURRENT_PATH=$(cd "$(dirname "$0")" || exit;pwd)
cd "$CURRENT_PATH" || exit


trim(){
    local trimmed="$1"
    # Strip leading spaces.
    while [[ $trimmed == ' '* ]]; do
       trimmed="${trimmed## }"
    done
    # Strip trailing spaces.
    while [[ $trimmed == *' ' ]]; do
        trimmed="${trimmed%% }"
    done
    echo "$trimmed"
      }

function realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

shell_path=$(realpath "$0")
shell_dir=$(dirname "$shell_path")

echo "shell_dir:$shell_dir"

create_docker_compose_file(){
if [ ! -z "$1" ] && [ "$1" == "rm" ]
then

  CHANGE_THIS_VERSION=$(docker ps | grep "dongtai-webapi:" | awk '{split($2,a,":");print a[2]}')

  WEB_CONTAINER_ID=$(docker ps | grep 'dongtai-web:' | awk '{print $1}')
  WEB_SERVICE_PORT=$(docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}} {{(index $conf 0).HostPort}} {{end}}' $WEB_CONTAINER_ID)
  WEB_SERVICE_PORT=$(trim $WEB_SERVICE_PORT)
fi


MYSQL_STR=""
REDIS_STR=""
if [ $SKIP_MYSQL == false ]; then
    mkdir ./data
    export MYSQL_STR=`cat <<EOF;
dongtai-mysql: 
    container_name: dongtai-iast-dongtai-mysql-1
    image: dongtai.docker.scarf.sh/dongtai/dongtai-mysql:$CHANGE_THIS_VERSION
    restart: always
    volumes:
      - "$PWD/data:/var/lib/mysql:rw"

EOF
`
fi

if [ $SKIP_REDIS == false ]; then
    export REDIS_STR=`cat <<EOF;
dongtai-redis:
    container_name: dongtai-iast-dongtai-redis-1
    image: dongtai.docker.scarf.sh/dongtai/dongtai-redis:$CHANGE_THIS_VERSION
    restart: always

EOF
`
fi

read -r -d '' DOCKER_COMPOSE_FILE << EOM
version: "2"
services:
  $MYSQL_STR
  $REDIS_STR
  dongtai-webapi:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-webapi:$CHANGE_THIS_VERSION"
    restart: always
    volumes:
      - "$PWD/config-tutorial.ini:/opt/dongtai/webapi/conf/config.ini"

  dongtai-web:
    container_name: dongtai-iast-dongtai-web-1
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-web:$CHANGE_THIS_VERSION"
    restart: always
    ports:
      - "$WEB_SERVICE_PORT:80"
    volumes:
      - "$PWD/nginx.conf:/etc/nginx/nginx.conf"
    depends_on:
      - dongtai-webapi

  dongtai-openapi:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-openapi:$CHANGE_THIS_VERSION"
    restart: always
    volumes:
       - "$PWD/config-tutorial.ini:/opt/dongtai/openapi/conf/config.ini"

  dongtai-engine:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-engine:$CHANGE_THIS_VERSION"
    restart: always
    volumes:
      - "$PWD/config-tutorial.ini:/opt/dongtai/engine/conf/config.ini"


  dongtai-engine-task:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-engine:$CHANGE_THIS_VERSION"
    restart: always
    command: ["/opt/dongtai/engine/docker/entrypoint.sh", "task"]
    volumes:
      - "$PWD/config-tutorial.ini:/opt/dongtai/engine/conf/config.ini"
    depends_on:
      - dongtai-engine
EOM

}


if [ ! 0 == $# ] # If options provided then 
then
    while getopts ":h" opt; do # Go through the options
        case $opt in
            h ) # Help
                usage
                exit 0 # Exit correctly
            ;;
            ? ) # Invalid option
                echo "[ERROR]: Invalid option: -${OPTARG}"
                usage
                exit 1 # Exit with erro
            ;;
        esac
    done
    shift $((OPTIND-1))
    subcommand=$1; shift # Get subcommand and shift to next option
    case "$subcommand" in
        install ) # install iast server 
            #unset OPTIND

            # Check if the Docker service is turned on
check_docker(){
  Info "check docker servie status."
  docker ps 1>/dev/null 2>/dev/null
  
  if [ $? -ne 0 ]; then
    Error "docker service is down. please start docker service and rerun."
    exit
  else
    Info "docker service is up."
  fi
}


check_docker_compose(){
  if ! [ -x "$(command -v docker-compose)" ]; then
    Error 'docker-compose not installed.'
    exit 1
  fi
}

# Info "mysql persistence"
# mkdir data

start_docker_compose(){
    Info "Starting docker compose ..."

    if [ "$DOCKER_COMPOSE_FILE" = "" ]
    then 
        Error "Create docker-compose.yaml error"
        exit 1
    fi

    docker-compose -p dongtai-iast -f <(echo "$DOCKER_COMPOSE_FILE") up -d
}


# Specify the port of Web, OpenAPI service and check whether it is available
check_port(){
  Info "check port status"

  read -p "[+] please input web service port, default [80]:" WEB_SERVICE_PORT
  if [ -z "$WEB_SERVICE_PORT" ];then
    WEB_SERVICE_PORT=80
  fi

  lsof -i:$WEB_SERVICE_PORT|grep "LISTEN" 2> /dev/null

  
  if [ $? -ne 0 ]; then
    Info "port $WEB_SERVICE_PORT is ok."
  else
    Error "port $WEB_SERVICE_PORT is already in use. please change default port."
    exit
  fi
}



            if [ ! 0 == $# ] # if options provided
            then
                while getopts ":m:s:v:h:" optname
                do
                    case "$optname" in
                      "s")
                        SKIP=$OPTARG
                        array=(${SKIP//,/ })
                        for var in "${array[@]}"
                          do
                            if [ "$var" == "mysql" ]; then
                              SKIP_MYSQL=true
                            elif [ "$var" == "redis" ]; then
                              SKIP_REDIS=true
                            fi
                          done
                        ;;
                      "v")
                        CHANGE_THIS_VERSION=$OPTARG
                        ;;
                      "h")
                        usage
                        exit 1
                        ;;
                      ":")
                        Error "option -${OPTARG} requires an argument"
                        usage
                        exit 1
                        ;;
                      "?")
                        Error "Invalid option: -${OPTARG}"
                        usage
                        exit 1 # Exit with erro
                        ;;
                    esac
                done
            fi

            if [ -z "$CHANGE_THIS_VERSION" ] || [ "$CHANGE_THIS_VERSION" == "" ]
            then
                Error "version required"
                exit 1
            fi

            check_docker
            check_docker_compose
            check_port
            create_docker_compose_file
            start_docker_compose

            if [ $? -ne 0 ]; then
                Error "Installation failed,Something wrong!"
                exit
            else
                Notice "Installation success!"
            fi
            
        ;;
        remove | rm ) 
            if [ ! 0 == $# ] # if options provided
            then
                while getopts ":d:h:" opt; do
                    case ${1} in
                        "-d") 
                            Notice "DESTORY_DATA set to true, all data will be destoryed."
                            DESTORY_DATA=true
                        ;;
                        "-h") 
                            Usage "\t$_filename remove [-d]                 Uninstall iast server"
                            exit 1
                        ;;
                        ? ) # Invalid option
                            Error "Invalid option: -${OPTARG}"
                            usage
                            exit 1 # Exit with erro
                        ;;
                    esac
                done                
            fi

            create_docker_compose_file "rm"
            if [ "$DESTORY_DATA" == true ]
            then
                docker-compose -p dongtai-iast -f <(echo "$DOCKER_COMPOSE_FILE") down -v
                rm -rf $PWD/data
            else
                docker-compose -p dongtai-iast -f <(echo "$DOCKER_COMPOSE_FILE") down 
            fi
        ;;

        upgrade)
            sha=sha1sum
            if [ $machine == "Mac" ]
            then
              sha=shasum
            fi

            TO_VERSION=""
            FROM_VERSION=""
            SHA_FILE=updaterecord.txt
            now=$(date '+%Y-%m-%d-%H-%M-%S')
            backup_filename=$UPGRADE_DIR/dongtai_iast-$now.sql

            MYSQL_CONTAINER_ID=$(docker ps | grep 'dongtai-mysql:' | awk '{print $1}')
            WEB_CONTAINER_ID=$(docker ps | grep 'dongtai-web:' | awk '{print $1}')


            function backup_mysql(){
              mkdir -p $UPGRADE_DIR
              Info "Start to backup exist data..."
              retval=$(echo "dongtai-iast" |  docker exec -i  $MYSQL_CONTAINER_ID  mysqldump -u root -d dongtai_webapi -p >$backup_filename )
              Info "Finished backup exist data..."

            }


            function check_update_record_file(){
              if [ ! -f "$SHA_FILE" ]; then
                Error "updaterecord.txt does not exists!" 
                exit
            fi
            }

            function current_hash(){
              retval=""
              retval=$(echo "dongtai-iast" |  docker exec -i  $MYSQL_CONTAINER_ID  mysqldump -u root -d dongtai_webapi --ignore-table=dongtai_webapi.mysql_version_control -p --skip-comments   --skip-opt | sed 's/ AUTO_INCREMENT=[0-9]*//g' | sed 's/\/\*!*.*//g' | $sha |awk '{print $1}')
              echo "$retval" 
            }

            function check_schema_hash(){
              Info "Check database schema ..."

              # set -x
              # cat updaterecord.txt | awk "{ if($1==$FROM_VERSION) print $4}"

              FROM_DB_HASH=$(cat updaterecord.txt | awk -v FROM_VERSION=$FROM_VERSION '{ if($1==FROM_VERSION) print $4}')
              CURRENT_DATABASE_HASH=$( current_hash )

              Info "FROM_DB_HASH:$FROM_DB_HASH"
              Info "CURRENT_DATABASE_HASH:$CURRENT_DATABASE_HASH"

              if [ ! $CURRENT_DATABASE_HASH == $FROM_DB_HASH ]
              then
                Error "Your current database hash value  not equals to the verison $FROM_VERSION, please check."
                exit
              fi

              Info "Database schema correct ..."
            }

            # check whether sql all exist
            function check_sql_all_exist(){
              SQL_NAMES=$(cat updaterecord.txt| awk "/$TO_VERSION/,/$FROM_VERSION/ {print \$2}" | grep -vF "$FROM_VERSION" | awk "{array[NR]=\$0} END { for(i=NR;i>0;i--) {print array[i];} }" )
              # whether sql files exist 
              for SQL in $SQL_NAMES
              do
                if test -f "$UPGRADE_DIR/$SQL"; then
                  Info "$UPGRADE_DIR/$SQL exists."
                else
                  Info "$UPGRADE_DIR/$SQL not exists."
                  all_sql_exists=false
                  return
                fi
              done
            }


            function execute_update(){
              # extract sql name and reverse list 
              SQL_NAMES=$(cat updaterecord.txt| awk "/$TO_VERSION/,/$FROM_VERSION/ {print \$2}" | grep -vF "$FROM_VERSION" | awk "{array[NR]=\$0} END { for(i=NR;i>0;i--) {print array[i];} }" )
            check_sql_all_exist
            if [ $all_sql_exists == false ]
            then
              # fetch sql from aliyun OSS
              for SQL in $SQL_NAMES
              do 
                Info "Start to download sql:[$SQL]"
                STATUS=$(curl -o $UPGRADE_DIR/$SQL -w "%{http_code}" https://huoqi-public.oss-cn-beijing.aliyuncs.com/iast/sql/$SQL)
                if [ ! $STATUS == "200" ] 
                then 
                  Error "SQL:[$SQL] does not exists in OSS,please contract dongtai administrator."
                  exit
                fi
              done

              Info "Success downloaded ${#SQL_NAMES[@]} sqls."
            fi

              # sql downloaded,start to execute sql
              for SQL in $SQL_NAMES
              do 
                Info "Start to load sql:[$UPGRADE_DIR/$SQL]"
                Info $SQL
                docker exec -i $MYSQL_CONTAINER_ID mysql -uroot -p"dongtai-iast" dongtai_webapi < $UPGRADE_DIR/$SQL
              done
            
            }

            function check_after_execute(){
              Info "Check result..."
              TO_DB_HASH=$(cat updaterecord.txt | awk -v TO_VERSION=$TO_VERSION '{ if($1==TO_VERSION) print $4}')
              CURRENT_DATABASE_HASH=$( current_hash )

              Info "TO_DB_HASH:$TO_DB_HASH"
              Info "CURRENT_DATABASE_HASH:$CURRENT_DATABASE_HASH"

              if [ ! $CURRENT_DATABASE_HASH == $TO_DB_HASH ]
              then
                Error "Your current database hash value  not equals to the verison $TO_DB_HASH, please check."
                exit
              fi

              Info "Current database schema correct ..."
              Info "Upgrade Success ..."
            }

            function upgrade_docker_image(){
            WEB_PORT=$(docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}} {{(index $conf 0).HostPort}} {{end}}' $WEB_CONTAINER_ID)
            WEB_PORT=$(trim $WEB_PORT)


read -r -d '' UPGRADE_DOCKER_COMPOSE_FILE << EOM
version: "2"
services:
  dongtai-webapi:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-webapi:$TO_VERSION"
    restart: always
    volumes:
      - "$PWD/config-tutorial.ini:/opt/dongtai/webapi/conf/config.ini"
  dongtai-web:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-web:$TO_VERSION"
    restart: always
    ports:
      - "$WEB_PORT:80"
    volumes:
      - "$PWD/nginx.conf:/etc/nginx/nginx.conf" 
    depends_on:
      - dongtai-webapi
  dongtai-openapi:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-openapi:$TO_VERSION"
    restart: always
    volumes:
       - "$PWD/config-tutorial.ini:/opt/dongtai/openapi/conf/config.ini"
  dongtai-engine:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-engine:$TO_VERSION"
    restart: always
    volumes:
      - "$PWD/config-tutorial.ini:/opt/dongtai/engine/conf/config.ini"
  dongtai-engine-task:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-engine:$TO_VERSION"
    restart: always
    command: ["/opt/dongtai/engine/docker/entrypoint.sh", "task"]
    volumes:
      - "$PWD/config-tutorial.ini:/opt/dongtai/engine/conf/config.ini"
    depends_on:
      - dongtai-engine
EOM

        Info "Start to pull new images with tag $TO_VERSION"
        docker-compose -p dongtai-iast -f <(echo "$UPGRADE_DOCKER_COMPOSE_FILE") pull

        Info "Start new containers with tag $TO_VERSION "
        docker-compose -p dongtai-iast -f <(echo "$UPGRADE_DOCKER_COMPOSE_FILE") up -d

}

        function summary(){
          Notice "-----Upgrade summary start-----"
          Info "Ugrade from $FROM_VERSION to $TO_VERSION. \n"
          Info "Backup file : $backup_filename"
          Info "Executed sql as follow: "
          for SQL in $SQL_NAMES
          do 
            Info $SQL
          done
          Info "Ugrade workdir is $UPGRADE_DIR, this can be delete after upgraded. "
         Notice "-----Upgrade summary end-----"
        }

                        if [ ! 0 == $# ] # if options provided
                        then
                            while getopts ":f:t:h" optname
                            do
                                case "$optname" in
                                  "f")
                                    FROM_VERSION=$OPTARG
                                    ;;
                                  "t")
                                    TO_VERSION=$OPTARG
                                    ;;
                                  "h")
                                    Usage "\t$_filename upgrade -f 1.0.5 -t 1.1.2   Upgrade iast server"
                                    exit 1
                                    ;;
                                  ":")
                                    if [ -z "$FROM_VERSION" ]
                                    then 
                                        Error "FROM_VERSION required."
                                    fi
                                    if [ -z "$TO_VERSION" ]
                                    then 
                                        Error "TO_VERSION required. "
                                    fi
                                    exit
                                    ;;
                                  "?")
                                    Error "Unknown option $OPTARG"
                                    ;;
                                esac
                            done
                            backup_mysql
                            check_update_record_file
                            check_schema_hash
                            execute_update
                            check_after_execute
                            upgrade_docker_image
                            summary
                        else
                            Error "FROM_VERSION required."
                            Error "TO_VERSION required."
                            Usage "\t$_filename upgrade -f 1.0.5 -t 1.1.2   Upgrade iast server"
                        fi
                    ;;
                    * ) # Invalid subcommand
                        if [ ! -z $subcommand ]; then  # Don't show if no subcommand provided
                            echo "Invalid subcommand: $subcommand"
                        fi
                        usage
                        exit 1 # Exit with error
                    ;;
                esac
            else # else if no options provided throw error
                usage
                exit 1
            fi





